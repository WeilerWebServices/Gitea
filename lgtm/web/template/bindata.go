// Code generated by go-bindata.
// sources:
// files/brand.html
// files/error.html
// files/index.html
// files/logout.html
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesBrandHTML = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1a\xe9\x92\xdb\xb6\xf9\xbf\x9f\x02\x65\xd2\x48\x6a\x45\x52\xda\xb5\x9d\xd4\x2b\xa9\x5e\x7b\x5d\xc7\x6d\x7c\x8c\xbd\x99\x4c\xc7\xe3\x1f\x10\x09\x51\xd8\x05\x01\x06\x00\xa5\x65\xec\x9d\xe9\x43\xf4\x09\xfb\x24\xfd\x00\x1e\x12\x29\xea\xda\xd8\xd3\x63\xb2\x33\xcb\x03\xf8\xee\x0b\x1f\x40\x8d\x7e\x77\xf1\xfa\xe9\xe5\xdf\xdf\x3c\x43\x73\x1d\xb3\xc9\xbd\x91\xb9\x21\x1e\xb9\x38\x49\xc6\x0e\x5c\x1c\xc4\x30\x8f\xc6\x0e\xe1\xce\xe4\x1e\x82\xbf\xd1\x9c\xe0\x30\x7f\xb4\xaf\x9a\x6a\x46\x26\x3f\x3c\xbf\x7c\x39\xf2\xf3\xe7\x7b\xab\xc9\x29\x56\x04\xcd\x25\x99\x8d\x1d\xdf\x59\x43\x8a\x89\xc6\x28\x98\x63\xa9\x88\x1e\x3b\xa9\x9e\xb9\xdf\x39\xc8\xdf\x00\x10\x5c\x13\x0e\x00\x4b\x1a\xea\xf9\x38\x24\x0b\x1a\x10\xd7\xbe\xf4\x11\xe5\x54\x53\xcc\x5c\x15\x60\x46\xc6\x43\x07\x71\x1c\x93\xb1\xb3\xa0\x64\x99\x08\xa9\x77\x91\xa3\x64\x4c\xc2\x88\x38\xa0\xb3\x4e\x5c\xf2\x73\x4a\x17\x63\xe7\xc6\x4d\xb1\x1b\x88\x38\xc1\x9a\x4e\x19\xa9\xe3\x33\xca\xaf\x4b\x3d\x94\x06\x88\xc0\x9f\x61\x90\x46\x70\x0f\x2e\x0e\x92\x84\x01\x59\x78\x75\x90\xce\x12\x10\x83\xc6\x38\x22\xfe\x8d\x9b\x8f\x6d\x88\x92\xcb\x7a\x41\x54\x20\x69\xa2\xa9\x81\xa9\xa4\x7b\x47\xe3\x84\x11\x04\xb6\x97\x62\x81\x19\x5a\x0a\x79\x3d\x63\x62\x89\x66\x42\xa2\xe7\x54\x7f\x9f\x4e\xd1\x9b\x94\x31\xf4\x16\x24\x27\x4a\x2b\x94\x2a\xca\x23\x20\x10\xc7\x40\x40\x79\xe8\x49\x4a\x99\x46\x82\x23\x3d\x27\x25\x06\x10\xd3\x24\xd0\x24\x44\x53\x89\x79\x30\x47\xe7\x6f\x5e\x78\x56\xb2\x76\x2d\xfd\x99\x30\xb4\x22\x21\x22\x46\x70\x42\x95\x07\xf4\xfd\x40\xa9\x3f\xcf\x70\x4c\x59\x36\x7e\x2b\xa6\x42\x8b\x47\xf7\x07\x83\xfe\xe9\x60\x50\x98\x40\xe9\x8c\x11\x35\x27\x44\x97\x86\xd0\xe4\x46\x1b\x34\x67\x8b\x35\x0f\xe4\xf3\xc7\x97\x82\x8b\xbb\x33\x09\x42\x7e\x05\x94\x99\x48\xc3\x19\xc3\x92\x58\x26\xf8\x0a\xdf\xf8\x8c\x4e\x95\x2f\x02\x6d\x1c\xa5\xfc\x53\xef\xd4\x1b\x54\xaf\x9e\x21\xb9\xc1\x73\x77\x58\xe4\x80\xdb\x30\xf3\x0c\xf2\x57\x29\x34\x9a\x8a\x30\x5b\xa3\x18\xd2\x05\x0a\x18\x56\x6a\xec\x70\xbc\x98\x62\x89\xf2\x9b\x3b\x17\x31\x49\x20\xa6\xd6\xd8\x37\x11\x4c\x04\x61\xca\x89\x44\xc1\xac\x01\x66\x41\x71\x21\xaa\x53\xe7\xe0\x9a\x80\x08\x9d\xc9\xc8\xc7\x2d\x48\x29\x6b\x40\xc3\xad\x94\x49\xd2\x68\xae\x5b\x38\x15\xb6\x99\x54\x1c\x7d\x26\x22\xca\x2b\xbe\xd3\x54\x6b\x88\xce\xfc\xe6\x8a\x54\x83\x1d\x09\x48\xf0\x83\x81\x32\x62\x8c\xc0\x2d\x2d\xb2\xf8\x29\x6b\x68\xef\x83\xfa\x6b\xd6\x6b\xbc\xae\xd9\x66\x8a\x39\x18\x66\x87\xf1\x72\x00\xd7\x44\x12\xaa\x0c\xd9\x66\xc5\xf9\x70\x52\x64\xe8\x79\x91\xa1\xca\x66\x66\x2d\x25\xc1\xc5\xc3\x16\xdc\x64\xf2\x13\x24\xb3\x42\x4b\xaa\xe7\x65\x62\x56\x46\xfa\xca\x99\x34\x93\x94\x28\x63\x0d\xa4\x05\x22\x1c\x78\x04\xa4\xc6\xa5\x2a\x11\x0a\x4d\x09\x4c\x13\x14\x13\x09\x16\x8c\xbc\x91\x9f\xb4\x70\xdf\xd4\x16\x07\xa6\xf6\xa8\x6d\x2e\xdc\xe9\x3e\x08\x18\x95\x60\x5e\x0e\x16\x39\x83\x8a\xbb\x1b\x63\x79\xed\x46\xa0\x67\x3a\x35\xa1\x65\x40\xc1\x6e\x11\x47\x2f\x78\x6b\xa0\xd5\x18\x9a\xba\xac\x1e\xf9\x3e\x8b\x74\x0c\xa9\xea\x87\x22\x50\x1b\xec\xdf\x42\x12\xd9\x0a\x77\x01\xb3\xed\xc1\x5b\x8f\x87\xed\x11\xd3\x1a\x32\x33\x82\x75\x2a\x0f\x4a\xb8\xd6\x38\x39\x99\xbc\x23\x3a\x4d\x8a\x30\x21\xd2\x04\xc5\x49\x6b\x50\x3c\x95\xc0\x0a\x2a\x3e\x62\x14\xbc\x2a\x66\x48\x13\x1c\xc7\x30\xa4\x10\x64\xa6\x2d\xec\x29\xac\x76\x19\xf8\x37\x9e\x02\x21\x13\x10\xb9\xef\x09\x4a\x4c\x40\xc8\x22\xec\xfa\x48\x69\x88\x83\x10\x16\x47\x6b\x99\x97\xe7\x2f\x5e\x5d\xc2\xff\xb3\xb7\xef\xd0\x8c\x42\xc8\xc2\x78\x26\x52\x09\x08\x89\x50\x14\x60\xb3\x3c\x56\x76\x06\x4b\x0c\x3a\xe6\x7a\x6e\x8d\x14\x63\xc5\x87\xc8\xa4\xb1\x42\xdd\x87\x48\x31\x11\xf4\x10\x1a\x9e\x7c\x87\x9e\x64\xda\x44\xf1\x86\x23\x2a\x54\x8d\xa7\xa6\x67\x68\x9b\xcb\xe7\xe5\x64\xa4\xc3\xc9\x10\xba\x8b\xd0\x3e\x3d\x91\xe0\xf7\xb7\x59\xf8\x0b\x59\xaa\x6b\x8a\xbe\x61\xfa\x0c\xb2\x25\xf4\x64\x39\xf4\x18\x04\x66\xa6\xc2\x7f\x13\xe9\x33\xd4\x7d\x6c\x66\xab\xc9\x5e\x4e\xc7\x07\xb2\x7b\x79\x9e\x54\x3c\x5f\x62\xad\xd1\x2b\x21\x25\x55\x96\x21\x38\x47\x7b\xdc\xbe\x37\xb9\x99\xa9\x7c\xe6\x18\x56\xa7\x15\xab\x0b\x48\xa2\xd7\x2c\x56\xda\x84\xb7\xe1\x15\x42\x93\x21\xf2\x81\xb8\xc9\x0c\xe6\x78\xe6\xc2\x55\x1f\xc3\xec\xfe\xca\x96\x62\x8a\xbe\xcf\x64\x48\xb9\xba\xce\x72\x53\x8a\xa9\x37\x2f\x47\x9a\xec\x20\xa6\xaa\xb9\x63\x18\x3e\xa8\x18\xfe\x55\x10\x74\x89\x33\x06\x05\xd3\x70\xbb\x12\xc4\xd3\xf6\xb5\xc9\x0a\x66\xf2\x09\x68\x3f\xc3\x63\x78\x3d\x5c\xf1\x4a\x95\x86\x80\xff\x1b\x61\x8c\x14\xec\xec\x88\x77\x6d\x47\x9a\x1c\xb9\x08\x89\x12\xc1\x35\xd9\x6b\x4b\x98\x69\x0f\xda\xff\x74\xc1\x79\x43\x78\x68\x5a\xc1\x6a\x65\xda\x5a\x72\xea\x0d\x24\x74\x44\x50\x12\x4c\xeb\x6c\x96\x9e\xac\xa5\xe2\x98\x3a\x64\x02\xb0\x36\x10\xc0\x2a\x22\x34\x2c\x3e\x76\xe1\x01\xd4\x94\x6b\xca\x10\x06\xd2\xab\xa5\x29\xa7\x1d\x10\xba\x20\xe1\xe6\xc2\xd4\x66\xb1\x35\x85\xa9\x52\x20\x61\x9b\xb6\x07\x5a\x65\x03\x76\x4e\x02\x58\x80\xf3\x9b\x9b\xe4\xf6\xda\x82\xd7\xc4\xb5\x4a\x16\x1d\xbd\xed\xea\xc6\x4e\x48\x55\xc2\x70\xf6\x88\x0b\xde\xf4\xdb\x06\xa5\x5d\xab\x25\x2c\x94\xae\x25\x5f\xad\x95\xdb\x25\xda\x5e\x4b\x4b\x81\xf7\x08\xb2\x17\x22\x17\x57\x4b\xc1\xa3\xc9\x3b\xe8\x3b\x0b\x73\xa1\x39\x5e\x10\xde\x31\xfd\x91\xe9\x7f\x4c\x9b\x92\x11\x0d\xf2\xe6\x90\xfb\x49\x26\x93\x21\x4a\x40\x7f\x40\x34\xe1\x03\x2f\x45\xbc\x5a\xfa\xad\x4d\x4b\x0d\x7f\xb7\xe6\x16\xa4\xd9\x21\xb6\x02\x99\xd6\x74\x97\x37\x12\x49\x63\xd8\x5c\x2e\x08\x54\x56\x8d\xe0\xdf\x8d\x24\x31\x1b\xe0\xc2\x37\x68\x44\xe2\x89\xd9\x64\x85\x23\x1f\x9e\xd0\xbf\xfe\xf1\xcf\xdc\xbd\x13\xb3\xe8\x4e\xcd\x44\xa1\x67\x81\xd0\xde\xcf\x7e\x06\xb9\x32\xa8\x64\x62\x59\x17\x6c\x2d\xf9\x9b\xc2\xc1\xea\x65\x52\x9b\x6a\x04\x4f\xa5\xf1\xcb\x54\x3d\x58\xd6\xcd\x3e\xbc\x3e\xbb\x7d\xad\x6f\x9f\x3a\xbc\x6a\x7e\xa1\xb2\x59\x5a\x0c\xfd\x54\x6c\xb5\xb7\x96\xcd\xaa\x97\x2b\x77\xdb\xe5\x2e\xdb\x16\xaa\xbc\xaf\x37\x47\x21\x7d\xeb\x09\x26\x04\x64\x0d\x6c\x6d\x43\xd3\xb1\xc5\xc4\x3a\xc4\x9c\x5c\x84\x34\x80\xcd\x22\xd8\x1e\x50\xa9\x5c\x6d\xf5\x2d\x14\x54\x01\x4b\x32\x98\x63\x1e\x11\x45\xf4\x1d\xab\x66\x2e\x93\x72\x31\xa7\xa6\x97\xfc\x8c\x45\xd4\x12\x76\x10\x0d\x0d\x9a\x35\x83\x3b\x3c\xb6\x24\x8e\x68\x1c\xb5\xa2\x20\x25\x83\xd5\x0e\x40\x9d\x7a\x38\xc6\xbf\x08\x8e\x97\xf9\xc9\x40\x4a\x67\x38\x20\xca\xcf\xaf\x1a\x2c\xae\x89\xf4\x31\xc4\xf6\x62\x81\xb5\x0f\x2d\xa7\x77\x95\x44\xb5\x23\x97\x36\x55\x0e\x28\x91\xc6\x83\xb5\xd6\x31\xcf\xa7\x42\x63\xa8\x61\xa6\x9b\x40\xdc\x44\xcb\x61\x04\xf3\x33\xb2\xdd\xd5\xfb\xe8\xe4\x29\xa9\xef\xf0\xcd\xc9\xff\xa7\x6f\x56\x8d\xf6\xff\x84\x63\xbe\x60\xe7\x71\xf6\x5b\xeb\xb1\x8f\xe4\x6f\xad\xc7\xe7\x96\xeb\xbf\xb0\xf5\xb0\x10\x26\x6d\x8e\xef\xce\x2b\xd4\x63\xce\xb8\x36\x53\x07\xbd\xb4\xcb\xf7\xfa\xee\xea\x90\xd0\xf9\xdc\xb5\xe7\xd7\xed\x43\xd7\xcf\x91\xd1\x9c\x86\x61\xf5\xed\xa7\x05\xba\x13\x49\x1a\xba\x33\x46\x6e\xdc\x15\x1e\x44\x4b\x00\xfe\xed\xec\x6c\x39\xd6\x31\x21\x96\x5a\x80\x2d\x02\x74\x62\x7f\x81\x14\x68\x6f\xc9\x2c\x44\x32\x19\xb4\x1f\x78\x6e\x31\xce\x5d\x44\xb8\x84\xbd\xef\x4e\x11\x86\x0f\xbe\xb8\x0c\xcf\x60\x71\x93\x60\x5a\xb5\xdb\x18\x4f\x8d\x1b\x02\x8d\x7e\x54\x87\x4a\x74\x44\x6c\x48\x3a\x9d\x8a\x1d\xe1\x70\xc0\x47\x88\xdd\x1f\x01\xea\x47\xce\xc7\x9f\x31\xa3\x5d\x87\xcc\x35\x6a\x8a\x24\x58\x62\x2d\xa0\xe3\x15\x72\xdb\xd2\x77\xa8\xbc\x6d\x27\xd6\x3e\xe5\x4a\x63\xc6\x7c\x67\x72\x21\x96\x9c\x09\x1c\x6e\x48\x75\xf8\x17\x8c\x99\x10\x7a\xe7\x17\x8c\x3d\x96\x8f\x71\x48\xcc\xd9\xce\xc6\x21\x7b\x6e\x40\xdb\xc0\xd5\xda\x5d\x67\xf2\xb8\xd1\xfe\xee\x91\xbd\x11\x35\xf9\xb7\xcd\x7a\xcb\xb8\xe7\x3b\xdc\x15\x54\x4c\x99\xf9\xa7\xde\xc0\x1b\xb8\x98\x25\x73\x3c\x2c\xc6\xbc\x98\x72\xef\x4a\x59\x37\x5b\xba\x93\x5f\xc5\x68\x89\xb3\x44\x50\xae\x95\x7f\xdf\xf0\x2a\x99\x54\xc3\xfb\xd9\xad\x06\xbe\xee\x82\xb3\x53\xd3\x7a\xf6\x3c\x49\x70\x98\x75\x67\x29\xb7\x1f\x56\xba\x3d\xf4\xb1\x66\xb1\xaf\xbb\x1d\xaf\xbe\x2b\xeb\xf4\x2a\xa6\x2b\xb4\x90\x4a\x62\x9f\x9a\xf8\x25\x15\xe7\xab\xd5\xbe\xab\xe7\x85\x04\x16\xb9\xee\x83\xc1\xa0\xe7\xcd\xc0\xc9\x2f\x78\x77\x38\x80\x97\xb3\x3d\xa8\x27\x15\xea\xb0\x89\xdb\x47\x5b\x55\x28\xff\x7c\x1f\x2e\xb0\x39\xbd\xa4\x31\x81\x64\x58\xd3\xb9\x1d\xbe\xe2\xdf\x30\x00\xf2\x8a\x0e\x2f\x6f\xe5\x40\x26\xf3\x09\xae\xeb\x9c\xc3\x0a\xba\xd6\xfb\x15\x4d\x8d\xe7\xf4\xee\x46\x3d\xa9\x08\x9f\x20\x95\x06\xb0\x3f\x51\xb3\xb4\xe4\x70\x3c\xd5\xb5\x06\xa8\xe7\xe1\x30\x7c\x6a\x52\xb0\xeb\xac\xfa\x35\x13\x0a\xb1\x58\x90\xb5\x89\x12\xbe\xcd\x2f\x07\x68\xc0\xe8\x23\xa0\xa5\xdd\x60\x6e\x7a\x3c\x53\xad\xd6\xde\x2b\xed\xd6\x1b\xad\xd5\xf1\xc3\x5d\x99\x56\xdb\x94\x75\x25\x8b\xa9\xc2\x8a\x4d\x4d\x9b\x88\x77\xd4\x76\x82\x4c\x65\xb3\xd7\xba\x9a\x79\xc4\x1e\x10\xea\x45\x88\xde\xf6\xd1\xb7\x5b\x20\x6e\x6b\xa3\xb7\xfd\x8f\x62\x36\x83\x88\x7e\xe4\x3c\x18\xfc\xde\xb9\x5d\x85\xc4\xda\xe3\xaa\x1c\x6c\xaf\x07\x08\xd1\x19\xea\x2e\x29\x0f\xc5\xd2\x63\xc2\x9c\xf4\x08\xee\xcd\x85\xd2\xf6\x57\x1f\xe3\x71\xa7\x58\x24\x3a\x9b\xb9\xb5\x4a\x23\xda\x57\x7d\xd1\x8f\xfa\xb2\x8f\xfb\x71\xef\x23\x7d\xdf\x79\x6e\x7f\x22\x71\xce\x31\xcb\x60\xf9\x53\xaf\xa7\x57\x50\x24\x3a\x1f\xc6\xf2\x8c\xbe\x97\x1f\xc6\xe6\xf2\xe9\xd3\xf6\x34\xec\x1a\x00\xef\xe7\x71\x7e\xfb\xf4\xe9\xfd\x87\x9e\x97\xa4\x6a\xde\xc5\x32\xb2\xd5\x4b\xf5\x6e\xfb\x76\x92\x8d\x87\x7f\xe0\x64\x89\x2e\xc0\x21\xdd\xde\x19\x1e\x43\x21\xb5\x5f\x28\x9f\x31\x62\x00\xbb\xa2\xd7\x6f\x10\x8f\x01\x26\x22\xba\x00\x50\x4f\xb2\x4b\x1c\xbd\x02\x6d\x01\xf4\xfd\xe0\xc3\x19\xf6\xb0\xca\x78\x30\x1e\xc2\x93\x29\xd3\xd1\x59\xec\xc1\xe2\x0b\xa0\xaf\x44\x48\x3c\x58\x27\x89\xd4\x4f\xec\x37\xec\xae\x51\xf7\x5e\xd3\x51\x85\x39\xfb\x65\xa5\xed\x77\x72\xab\x77\xfa\x1d\xdf\x5f\x2e\x97\xc5\xef\x47\x20\x8c\x0a\xeb\xe4\xf5\xbe\x7a\xbb\x52\x00\x19\xe1\xce\x46\x1c\x44\xb8\xdb\xc9\x95\xeb\xf4\x51\xe7\xc7\x73\xf7\xdb\xe1\x70\xf8\xf0\xc1\xe9\x9f\xdc\xa1\x19\xc0\xa9\x16\xed\x48\x0a\x02\xdc\x40\x98\xdf\x64\x98\x0f\x27\x75\xa8\xdb\x96\x88\xc9\xdf\xf2\xdf\x7b\x40\x03\x67\x7f\x6e\xf5\xef\x00\x00\x00\xff\xff\x28\x15\xff\x55\x7f\x25\x00\x00")

func filesBrandHTMLBytes() ([]byte, error) {
	return bindataRead(
		_filesBrandHTML,
		"files/brand.html",
	)
}

func filesBrandHTML() (*asset, error) {
	bytes, err := filesBrandHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/brand.html", size: 9599, mode: os.FileMode(420), modTime: time.Unix(1478811055, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesErrorHTML = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xc1\x6e\xd4\x30\x10\xbd\xf3\x15\x83\x2f\x39\xd0\xc4\x8b\xe0\x80\xaa\xa4\x20\x15\x0e\x1c\x10\x08\x55\x42\x9c\x90\xd7\x9e\x6c\x46\xeb\xc4\xa9\x3d\xd9\xdd\x50\xf5\xdf\x99\x6c\x16\x6d\xd9\x2e\xad\x0f\x71\x66\x3c\x6f\xde\xcb\xf3\xa4\x7c\xf9\xf1\xeb\xf5\xcd\xcf\x6f\x9f\xa0\xe1\xd6\x5f\xbd\x28\xe7\x0d\x64\x95\x0d\x1a\x37\xbf\xee\x43\x26\xf6\x78\x55\xea\x79\x3f\xe6\x5b\x64\x03\xb6\x31\x31\x21\x57\x6a\xe0\x3a\x7f\xa7\x40\x3f\x2a\x08\x1d\x63\x27\x05\x5b\x72\xdc\x54\x0e\x37\x64\x31\xdf\x07\x17\x40\x1d\x31\x19\x9f\x27\x6b\x3c\x56\xaf\x15\x74\xa6\xc5\x4a\x6d\x08\xb7\x7d\x88\xfc\x54\x3b\xc2\x0a\xdd\x0a\x95\xe8\xe7\x3e\xc7\xdb\x81\x36\x95\xda\xe5\x83\xc9\x6d\x68\x7b\xc3\xb4\xf4\xf8\x2f\xde\x53\xb7\x86\x26\x62\x5d\x29\x9d\x58\x2a\xac\xae\x8d\xa8\x09\x5d\x21\x0f\x05\x11\xbd\xb4\x95\x50\x01\x8f\xbd\xc8\xa0\xd6\xac\x50\xef\xf2\x39\x77\xbe\x55\x36\xd1\xa7\x4b\xad\x6b\x11\x96\x8a\x55\x08\x2b\x8f\xa6\xa7\x54\x88\x0c\x6d\x53\x7a\x5f\x9b\x96\xfc\x58\x7d\x0f\xcb\xc0\xe1\xf2\xed\x62\x71\xf1\x66\xb1\xc8\xf6\x6c\x59\xe2\xd1\x63\x6a\x10\x39\x9b\x39\x33\xc6\x1d\x4f\xb0\xec\xbc\xf0\x27\xd9\x26\x9d\x7f\xe9\xbe\x18\xc6\x28\xd6\xbe\xfa\x2c\xc9\x74\xf8\xb8\x23\xdd\xb3\xce\xcc\xa5\x85\x28\xf9\x3f\xb6\xd4\xc7\x49\x29\x97\xc1\x8d\x0f\x5a\x3a\xda\x80\xf5\x26\xa5\x4a\x4d\x57\x66\xa8\xc3\x08\x3e\xac\xc2\xc0\xea\x58\x76\x5a\xda\x62\x4a\xe2\x39\x1c\xf6\xbc\x1e\xbc\x9f\x67\xe5\x04\x34\xad\xbb\x3b\xa0\x1a\xf0\x16\x0a\x8c\x31\x44\x50\xd6\x87\x84\xee\xd7\x52\xe6\x44\xc1\xfd\xfd\x23\xc0\x0f\x04\x13\x11\xec\x10\xa3\x8c\x90\x1f\x65\xfc\x60\xc6\xc0\x84\x29\xe0\x7a\x52\x6a\x19\x3e\x2c\xa3\x71\x71\x74\xbf\x71\x9b\xd6\x04\xa1\x83\x9b\x2d\xb1\x18\x3a\x11\x8e\x61\x80\x6d\x18\xbc\x03\x4f\x6b\x04\x0e\xd0\x9b\x28\x96\x91\x0c\x1d\x16\x67\x54\xa2\x4f\x78\x46\x8d\xc8\x3f\x08\x3f\x7f\x88\x9d\x3b\x39\x28\xb5\x58\xf5\xc0\xe3\x63\x58\xea\xd9\x7e\xb9\x91\xfd\x6f\xfc\x27\x00\x00\xff\xff\x8d\x22\x05\x91\xde\x03\x00\x00")

func filesErrorHTMLBytes() ([]byte, error) {
	return bindataRead(
		_filesErrorHTML,
		"files/error.html",
	)
}

func filesErrorHTML() (*asset, error) {
	bytes, err := filesErrorHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/error.html", size: 990, mode: os.FileMode(420), modTime: time.Unix(1478811055, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesIndexHTML = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\x60\xf5\x42\x6b\xd3\x1f\x1b\xed\xb6\xae\x36\x33\xa4\xab\x37\xec\xa1\xcd\x90\x66\x03\x86\x20\x28\x68\xea\x24\xd3\xa3\x48\x95\xa4\xe2\x18\x71\xbe\xfb\x8e\x92\x5d\x27\x8a\x93\xbd\x6c\x7e\x20\x75\xc7\xdf\xfd\xee\x0f\x8f\xe7\xd9\xcb\xf7\x67\x3f\x5f\xfc\xf5\xfb\x9c\x2c\x7d\xad\x4e\x5e\xcc\xc2\x46\x74\x95\xf2\xa6\x61\x11\x2e\x11\x51\x5c\x57\x2c\x02\x1d\x9d\xbc\x20\xf8\x9b\x2d\x81\x17\xfd\x67\x27\x7a\xe9\x15\x9c\xcc\xf2\x7e\x3f\xe8\x17\xdc\x01\x59\x5a\x28\x59\x94\x47\xf7\xf4\x35\x78\x4e\xc4\x92\x5b\x07\x9e\x45\xad\x2f\xd3\x37\x11\xc9\x1f\x01\x8c\xf6\xa0\x11\xb0\x96\x85\x5f\xb2\x02\xae\xa5\x80\xb4\x13\x12\x22\xb5\xf4\x92\xab\xd4\x09\xae\x80\x4d\x22\xa2\x79\x0d\x2c\xba\x96\xb0\x6e\x8c\xf5\xcf\xd1\x49\x60\x50\x54\x10\x61\xba\xbe\x49\xe1\x4b\x2b\xaf\x59\x74\x93\xb6\x3c\x15\xa6\x6e\xb8\x97\x0b\x05\x0f\xed\x95\xd4\x7f\xef\xf3\x70\x1e\x11\x22\x2f\x39\x46\x63\x74\x86\x4b\x44\x2c\x28\xa4\x45\x31\x22\x7e\xd3\x60\x18\xb2\xe6\x15\xe4\x37\x69\xaf\x3b\x4e\x45\x83\x7b\xf7\x36\xcf\x4b\x0c\xcc\x65\x95\x31\x95\x02\xde\x48\x97\x61\x18\xb9\x70\xee\xa7\x92\xd7\x52\x6d\xd8\xb9\x59\x18\x6f\xde\xbe\x1e\x8f\x93\x57\xe3\x31\xed\xbc\x51\xe7\x37\x0a\xdc\x12\xc0\xd3\xde\x27\xf5\x70\xe3\x83\x19\x3d\x1e\xf8\xb3\xde\x42\x9c\x7b\x77\x1f\xb8\x07\x8b\xa5\xfd\xf6\x37\x54\xba\x5d\x72\x07\x77\xff\x5a\x99\x1e\x9a\x61\x24\xc7\x6d\xfb\x0e\xca\x0f\x2d\x34\x5b\x98\x62\x73\x8f\xb3\x90\xd7\x44\x16\x2c\xb2\xc6\xf8\x08\xbb\x0a\xe5\xc1\x29\xf6\x66\xb8\xe8\x47\x67\x4e\x58\xd9\xf8\x83\x22\xfc\xd6\x52\x17\x66\x9d\x7d\xba\x38\xbd\x98\x7f\xfe\xe5\xfc\xec\xc3\xe7\x4f\xf3\xf3\x3f\xe7\xe7\xec\xf6\x96\x64\x64\x4b\x56\xce\x68\x72\x77\x77\x20\xc9\xf7\x2c\x43\x5e\xe2\xac\xc0\x34\x73\x51\xe8\x15\xe6\xa7\x4c\x5b\x94\x8a\x5b\xe8\x2a\xc8\x57\xfc\x26\x57\x72\xe1\x72\x7c\x2a\x2d\xaa\xb3\x95\xcb\x27\xd9\xeb\xec\xcd\x3d\x45\xc8\x66\x18\xe3\x7f\x43\x9e\x5a\xd3\x7a\xf8\x9f\x5d\x80\x33\xad\x15\x4f\x7a\x79\x99\xa6\x03\x57\xfb\x8e\xe8\x74\x0f\xcd\x48\x9a\x3e\x15\xe0\xce\x4a\x55\xbe\x1e\xb8\x7a\xee\xa6\x65\x49\x46\xbb\xbb\x56\x46\x20\x03\x3e\xce\xa5\x71\xbe\x9b\x0b\x8c\xd1\x8e\x4e\x18\x1a\x93\xdb\x07\xfd\x41\xc8\xa8\x6c\xb5\x08\xf8\x91\x4c\x5c\x62\x92\x2a\xb1\x09\x4f\xea\xf8\x56\x5e\xd2\x5f\xbb\x77\x72\xaa\xb9\xda\x60\x4c\xee\x6c\xb1\x02\xe1\xe9\x15\xb3\x53\x79\x69\xaf\x58\x58\xb6\xdb\xaf\xf6\xf1\x23\xea\x00\xc8\xbe\xb0\x7e\xdb\x6e\x2f\xaf\xe2\xac\x69\xdd\x72\xc4\x6d\xd5\xd6\x38\x8d\x5c\x7c\x97\x74\x87\x8a\x4d\xbe\xd1\xb0\x26\xef\xf1\xf5\x8d\xe2\x29\x67\x78\x43\x16\x50\x98\x2b\x08\xc0\x91\x89\x93\x01\x79\x8d\x98\x0a\xfc\x0e\xe0\xde\x6d\x2e\x78\xf5\x11\xb3\x45\xe8\xe5\xf8\x6a\xca\x33\xee\x36\x5a\xb0\x09\x7e\x85\xc2\x56\xd3\x3a\x6b\xf0\xba\xb5\xff\x68\x0a\xc8\xa4\x76\x60\xfd\x3b\x28\x8d\x85\x51\x48\x77\xc0\x7e\x17\xef\xca\x99\x14\x46\x74\xb1\x26\xb4\xaf\x3a\x4d\x68\x9e\xaf\xd7\xeb\xdd\x10\x49\xf9\xbe\x3a\x7d\x23\x7d\x95\x56\x0e\x91\x15\xa7\xf1\x74\x40\x5d\xf1\x11\xed\x93\xa3\x09\xa1\x7f\x9c\xa6\x3f\x4c\x26\x93\xef\xbf\x7b\xf5\x63\x3a\x09\x0a\xde\x7a\x73\xdc\xc8\x81\x2e\x02\xa2\xc1\xe9\x1a\x06\xc0\x43\xd4\xb1\x37\xdc\x4b\xfd\x80\xc1\x99\xd3\xfd\xbf\xfd\x13\x00\x00\xff\xff\x8f\x6e\x08\xca\xf0\x06\x00\x00")

func filesIndexHTMLBytes() ([]byte, error) {
	return bindataRead(
		_filesIndexHTML,
		"files/index.html",
	)
}

func filesIndexHTML() (*asset, error) {
	bytes, err := filesIndexHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/index.html", size: 1776, mode: os.FileMode(420), modTime: time.Unix(1478811055, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesLogoutHTML = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xb1\x92\xd3\x40\x0c\xed\xef\x2b\xc4\x36\x2e\x38\x67\xc3\x40\xc1\xdc\x78\x43\x01\x14\x14\x0c\x0c\x43\x73\xa5\xb2\x96\xed\x1d\xd6\xbb\xc6\x92\x93\xf8\xef\x91\xe3\xbb\x49\x80\xe3\x70\xb1\xb2\xb4\xd2\x7b\x4f\xb2\x5c\xbd\xf8\xf0\xe5\xfd\xf7\xfb\xaf\x1f\xa1\x93\x3e\xee\x6e\xaa\xc5\x40\x6a\x4b\x1c\x06\x67\xf4\x30\x10\x31\xb5\xce\x50\x32\xbb\x1b\xd0\xa7\xea\x08\xeb\xf5\xf5\xec\x4a\x90\x48\xbb\xca\xae\xf6\x12\xdf\x23\x13\x74\x23\x35\xce\x58\x73\x15\xef\x49\x10\x7c\x87\x23\x93\x38\x33\x49\x53\xbe\x35\x60\xff\x4a\xc8\x49\x28\x69\xc2\x31\xd4\xd2\xb9\x9a\x0e\xc1\x53\x79\x76\x6e\x21\xa4\x20\x01\x63\xc9\x1e\x23\xb9\x57\x06\x12\xf6\xe4\xcc\x21\xd0\x71\xc8\xa3\x3c\x07\x17\xc8\x51\xdd\x92\xd1\x76\x65\x28\xe9\xe7\x14\x0e\xce\x9c\xca\x09\x4b\x9f\xfb\x01\x25\xec\x23\xfd\x5e\x1f\x43\xfa\xf1\xd8\x07\x8b\x66\x78\xdb\xa0\xaa\xc9\x69\xa3\x87\x81\x91\xa2\xc2\xaa\x6b\x40\xe6\x41\x65\x84\x1e\x5b\xb2\xa7\x72\x8d\x3d\x0d\x55\x2c\xf4\x7c\x67\x6d\xa3\xc2\x78\xd3\xe6\xdc\x46\xc2\x21\xf0\x46\x65\x58\xcf\xfc\xae\xc1\x3e\xc4\xd9\x7d\xcb\xfb\x2c\xf9\xee\xcd\x76\x7b\xfb\x7a\xbb\x2d\xce\x6c\x05\xcb\x1c\x89\x3b\x22\x29\x56\xce\x42\xe8\x24\x4b\x59\xf1\xb4\xf0\x67\xd9\x16\x9d\x8f\x74\x9f\x51\x68\xd4\xd1\xbe\xfc\xa4\x41\x7e\x68\xee\x42\xf7\xdf\xc9\xac\xa9\x1b\x55\xf2\xef\xda\xca\x5e\x36\xa8\xda\xe7\x7a\xbe\x82\xac\xc3\x01\x7c\x44\x66\x67\x96\x4f\x86\x21\xd1\x08\x31\xb7\x79\x92\xab\x1d\xfa\x33\xb5\x27\x66\x9d\x39\x3c\xd8\xb2\x99\x62\x5c\x77\xc5\xec\xee\xf3\x04\x47\x1a\x09\x78\xf2\x5e\xef\x97\xbb\x79\x81\x6c\xa9\x06\x85\xad\xac\x02\x5d\x29\xb8\xb8\x95\x5d\xc5\xa9\xde\xf3\xaf\xf1\x2b\x00\x00\xff\xff\x16\x92\xe2\x06\x2b\x03\x00\x00")

func filesLogoutHTMLBytes() ([]byte, error) {
	return bindataRead(
		_filesLogoutHTML,
		"files/logout.html",
	)
}

func filesLogoutHTML() (*asset, error) {
	bytes, err := filesLogoutHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/logout.html", size: 811, mode: os.FileMode(420), modTime: time.Unix(1478811055, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/brand.html":  filesBrandHTML,
	"files/error.html":  filesErrorHTML,
	"files/index.html":  filesIndexHTML,
	"files/logout.html": filesLogoutHTML,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"brand.html":  &bintree{filesBrandHTML, map[string]*bintree{}},
		"error.html":  &bintree{filesErrorHTML, map[string]*bintree{}},
		"index.html":  &bintree{filesIndexHTML, map[string]*bintree{}},
		"logout.html": &bintree{filesLogoutHTML, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
